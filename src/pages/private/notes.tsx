import { useState } from "react";
import { type NextPage } from "next";
import Head from "next/head";
import NavBar from "~/components/NavBar";
import { useSession } from "next-auth/react";
import { api, type RouterOutputs } from "../../utils/api";
import { NoteEditor } from "~/components/NoteEditor";
import { NoteCard } from "~/components/NoteCard";
import HearthSVG from "~/icons/HearthSVG";
import { useAtom } from "jotai";
import { globalStateAtom } from "~/state/globalState";

const Home: NextPage = () => {
  return (
    <>
      <Head>
        <title>:x</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main data-theme="winter">
        <NavBar />
        {/* <section className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]"> */}
        <section className="flex min-h-screen flex-col items-center justify-center bg-base-300">
          <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
            <Content />
          </div>
        </section>
      </main>
    </>
  );
};

export default Home;

type Topic = RouterOutputs["topic"]["getAll"][0];

const Content: React.FC = () => {
  const { data: sessionData } = useSession();
  const [selectedTopic, setSelectedTopic] = useState<Topic | null>(null);
  const [categoryInput, setCategoryInput] = useState("");
  const [globalState, setGlobalState] = useAtom(globalStateAtom);

  const { data: topics, refetch: refetchTopics } = api.topic.getAll.useQuery(
    undefined,
    {
      enabled: sessionData?.user !== undefined,
      onSuccess: (data) => {
        setSelectedTopic(selectedTopic ?? data[0] ?? null);
      },
    }
  );

  const { data: notes, refetch: refetchNotes } = api.note.getAll.useQuery(
    {
      topicId: selectedTopic?.id ?? "",
    },
    {
      enabled: sessionData?.user !== undefined && selectedTopic !== null,
    }
  );

  const createTopic = api.topic.create.useMutation({
    onSuccess: () => {
      void refetchTopics();
    },
  });

  const deleteTopic = api.topic.delete.useMutation({
    onSuccess: () => {
      void refetchNotes();
    },
  });

  const createNote = api.note.create.useMutation({
    onSuccess: () => {
      void refetchNotes();
    },
  });

  const deleteNote = api.note.delete.useMutation({
    onSuccess: () => {
      void refetchNotes();
    },
  });

  return (
    <div>
      <h1 className="mb-8 text-4xl font-bold text-white">Categories</h1>
      <ul className="menu rounded-box mb-8 bg-base-100 p-2">
        {topics?.map((topic) => (
          <li key={topic.id}>
            <div className="flex justify-between">
              <a
                href="#"
                onClick={(evt) => {
                  evt.preventDefault();
                  setSelectedTopic(topic);
                }}
              >
                {topic.title}
              </a>
              <span
                onClick={(evt) => {
                  evt.preventDefault();
                  deleteTopic.mutate({ id: topic.id });
                }}
              >
                X
              </span>
            </div>
          </li>
        ))}
      </ul>
      <div className="flex flex-col gap-4">
        <input
          type="text"
          placeholder="New Category"
          className="input-bordered input input-md w-full"
          value={categoryInput}
          onChange={(e) => setCategoryInput(e.currentTarget.value)}
          onKeyDown={(e) => {
            if (e.key === "Enter") {
              createTopic.mutate({
                title: categoryInput,
              });
              setCategoryInput("");
              e.currentTarget.value = "";
            }
          }}
        />
        <button
          className="btn-primary btn gap-2 bg-primary"
          onClick={(e) => {
            createTopic.mutate({
              title: categoryInput,
            });
            setCategoryInput("");
          }}
        >
          <HearthSVG />
          Add
        </button>
        <button
          className="btn-primary btn gap-2"
          onClick={() => {
            setGlobalState(globalState + 1);
          }}
        >
          Global State Tester
        </button>
      </div>
      <div className="divider mt-8 mb-8"></div>

      <h1 className="mb-8 text-4xl font-bold text-white">
        Global state counter: {globalState}
      </h1>
      <div className="col-span-3">
        <div>
          {notes?.map((note) => (
            <div key={note.id} className="mt-5">
              <NoteCard
                note={note}
                onDelete={() => void deleteNote.mutate({ id: note.id })}
              />
            </div>
          ))}
        </div>
        <NoteEditor
          onSave={({ title, content }) => {
            void createNote.mutate({
              title,
              content,
              topicId: selectedTopic?.id ?? "",
            });
          }}
        />
      </div>
    </div>
  );
};
